AWSTemplateFormatVersion: '2010-09-09'
Description: CTML Roto Cheese ETL

Parameters:
  ChromeLambdalayerArn:
    Type: String
    Default: arn:aws:lambda:us-east-1:085108115628:layer:chrome:6
  DependenciesHash:
    Type: String
  DependenciesS3Bucket:
    Type: String
  DependenciesS3Key:
    Type: String
  ErrorScreenshotS3Path:
    Type: String
  FailingETLNotificationEmail:
    Type: String
  LeagueUrl:
    Type: String
  PublishS3Bucket:
    Type: String
  PublishS3Path:
    Type: String
  RunAsUser:
    Type: String
    NoEcho: true
  RunAsPassword:
    Type: String
    NoEcho: true
  SrcHash:
    Type: String
  SrcS3Bucket:
    Type: String
  SrcS3Key:
    Type: String

Resources:
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      # max retention period of 14 days
      MessageRetentionPeriod: 1209600

  DeadLetterQueueReceivingMessages:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions: [!Ref FailingETLRuns]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DeadLetterQueue.QueueName
      EvaluationPeriods: 5
      InsufficientDataActions: [!Ref FailingETLRuns]
      MetricName: NumberOfMessagesSent
      Namespace: AWS/SQS
      OKActions: [!Ref FailingETLRuns]
      Period: 900
      Statistic: Maximum
      Threshold: 1
      TreatMissingData: breaching
      Unit: Count

  Dependencies:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes: [nodejs8.10]
      Content:
        S3Bucket: !Ref DependenciesS3Bucket
        S3Key: !Ref DependenciesS3Key
      Description:
        !Sub
          - CTML Roto Cheese ETL dependencies - ${HASH}
          - HASH: !Ref DependenciesHash

  ETL:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref SrcS3Bucket
        S3Key: !Ref SrcS3Key
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueue.Arn
      Environment:
        Variables:
          ERROR_SCREENSHOT_S3_BUCKET: !Ref Storage
          ERROR_SCREENSHOT_STORAGE_LOCATION: !Ref ErrorScreenshotS3Path
          ERROR_SCREENSHOT_STORAGE_TYPE: s3
          LEAGUE_URL: !Ref LeagueUrl
          PUBLISH_S3_BUCKET: !Ref PublishS3Bucket
          PUBLISH_S3_PATH: !Ref PublishS3Path
          RUN_AS_USER: !Ref RunAsUser
          RUN_AS_PASSWORD: !Ref RunAsPassword
      Handler: lambda-handler.handle
      Layers:
        - !Ref Dependencies
      MemorySize: 3008
      Role: !GetAtt Permissions.Arn
      Runtime: nodejs8.10
      Timeout: 90

  FailingETLRuns:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: email
          Endpoint: !Ref FailingETLNotificationEmail

  Permissions:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EtlExcecutionPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub
                  - '${StorageBucketArn}/*'
                  - StorageBucketArn: !GetAtt Storage.Arn
              - Effect: Allow
                Action: s3:*
                Resource: '*'
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt DeadLetterQueue.Arn

  ScheduledTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: launches CTML Roto Cheese ETL periodically
      ScheduleExpression: rate(10 minutes)
      Targets:
        - Arn: !GetAtt ETL.Arn
          Id: ETL

  ScheduledTriggerLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ETL.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledTrigger.Arn

  Storage:
    Type: AWS::S3::Bucket
